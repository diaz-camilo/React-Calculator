{"version":3,"sources":["AppButtons.jsx","AppTopBar.jsx","Calculator.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["AppButtons","props","grayButton","char","className","onClick","handleButtonPressed","operatorButton","handleClear","AppTopBar","title","Calculator","state","formula","newValue","concat","setState","calc","handleChange","event","target","value","inputToDisplay","map","index","match","type","onChange","this","placeholder","Component","App","calcString","calcValue","total","firstOperand","secondOperand","operation","slice","result","results","matchAll","undefined","parseFloat","Math","hypot","pow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b52c4e3.chunk.js","sourcesContent":["const AppButtons = (props) => {\n  const grayButton = (char) => (\n    <div className=\"grid-item\" onClick={() => props.handleButtonPressed(char)}>\n      <span>{char}</span>\n    </div>\n  );\n\n  const grayClearButton = () => (\n    <div className=\"grid-item\" onClick={props.handleClear}>\n      <span>C</span>\n    </div>\n  );\n\n  const operatorButton = (char) => (\n    <div\n      className=\"grid-item operator\"\n      onClick={() => props.handleButtonPressed(char)}\n    >\n      <span>{char}</span>\n    </div>\n  );\n\n  return (\n    <div className=\"grid-container\">\n      {/* first row */}\n      {grayButton(7)}\n      {grayButton(8)}\n      {grayButton(9)}\n      {operatorButton(\"+\")}\n\n      {/* second row */}\n      {grayButton(4)}\n      {grayButton(5)}\n      {grayButton(6)}\n      {operatorButton(\"*\")}\n\n      {/* third row */}\n      {grayButton(1)}\n      {grayButton(2)}\n      {grayButton(3)}\n      {operatorButton(\"-\")}\n\n      {/* fourth row */}\n      {grayClearButton()}\n      {grayButton(0)}\n      {grayButton(\".\")}\n      {operatorButton(\"/\")}\n    </div>\n  );\n};\n\nexport default AppButtons;\n","const AppTopBar = (props) => (\n  <div className=\"app-handlebar\">\n    <div className=\"close-max-min\">\n      <div className=\"close\"></div>\n      <div className=\"min\"></div>\n      <div className=\"max\"></div>\n    </div>\n    <p className=\"title\">{props.title}</p>\n  </div>\n);\n\nexport default AppTopBar;\n","import { Component } from \"react\";\nimport AppButtons from \"./AppButtons\";\nimport AppTopBar from \"./AppTopBar\";\n\nclass Calculator extends Component {\n  state = { formula: \"\" };\n\n  newValue = (char) => this.state.formula.concat(char);\n\n  handleButtonPressed = (char) => {\n    const formula = this.newValue(char);\n    this.setState({ formula });\n    this.props.calc(formula);\n  };\n\n  handleClear = () => {\n    this.setState({ formula: \"\" });\n    this.props.calc(\"\");\n  };\n\n  handleChange = (event) => {\n    const formula = event.target.value;\n    this.setState({ formula });\n    this.props.calc(formula);\n  };\n\n  inputToDisplay = () =>\n    [...this.state.formula].map((char, index) =>\n      char.match(/[^\\d+*/-]/g) !== null ? (\n        <span className=\"bad-char\" key={index}>\n          {char}\n        </span>\n      ) : (\n        char\n      )\n    );\n\n  render() {\n    return (\n      <div className=\"parent\">\n        <AppTopBar title=\"React Calc!\" />\n        <div className=\"app-input input-container\">\n          <input\n            type=\"text\"\n            onChange={this.handleChange}\n            value={this.state.formula}\n            placeholder=\" 0\"\n          ></input>\n          <div className=\"input-field-replacement\">\n            <div>{this.inputToDisplay()}</div>\n          </div>\n        </div>\n        <AppButtons\n          handleButtonPressed={this.handleButtonPressed}\n          handleClear={this.handleClear}\n        />\n      </div>\n    );\n  }\n}\nexport default Calculator;\n","import \"./App.css\";\nimport React from \"react\";\nimport { Component } from \"react\";\nimport Calculator from \"./Calculator\";\n\nclass App extends Component {\n  state = { calcString: \"\" };\n  calc = (calcValue) => this.setState({ calcString: calcValue });\n  total = () => {\n    const operation = this.state.calcString.slice();\n    const regex = /^(\\d+(?:.\\d+)?)(\\+|-|\\*|\\/){1}(\\d+(?:.\\d+)?)$/g;\n    const matchArray = [...operation.matchAll(regex)];\n    let result = \"\";\n    let firstOperand;\n    let secondOperand;\n    const results = matchArray[0];\n    if (results !== undefined) {\n      // results[1] -> first capturing group -> first digit\n      firstOperand = parseFloat(results[1]);\n      // results[3] -> third capturing group -> second digit\n      secondOperand = parseFloat(results[3]);\n      // results[2] -> second capturing group -> operator\n      switch (results[2]) {\n        case \"+\":\n          result = firstOperand + secondOperand;\n          break;\n        case \"-\":\n          result = firstOperand - secondOperand;\n          break;\n        case \"*\":\n          result = firstOperand * secondOperand;\n          break;\n        case \"/\":\n          result =\n            secondOperand !== 0\n              ? firstOperand / secondOperand\n              : \"Division by zero is undefined\";\n          break;\n        default:\n          break;\n      }\n    }\n\n    return (result === \"Division by zero is undefined\") | (result === \"\") ? (\n      <h3>{result}</h3>\n    ) : (\n      <div>\n        <h3>Result = {result}</h3>\n        <h4>Also, did you know?</h4>\n        <p>\n          The hypotenuse of a triangle with sides {firstOperand} and{\" \"}\n          {secondOperand} = {Math.hypot(firstOperand, secondOperand)}\n          <br />\n          or that <br />\n          {firstOperand} to the power of {secondOperand} ={\" \"}\n          {Math.pow(firstOperand, secondOperand)}\n        </p>\n      </div>\n    );\n  };\n\n  render() {\n    const invalid = () =>\n      this.state.calcString.match(/[^\\d+*/-]/g) !== null ? true : false;\n    return (\n      <main>\n        <h1>Calcuate with React!</h1>\n        {invalid() && (\n          <h1>\n            <span>ðŸ¤–</span> Unsuported character detected in input field.\n          </h1>\n        )}\n        <Calculator calc={this.calc} />\n\n        {this.total()}\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}